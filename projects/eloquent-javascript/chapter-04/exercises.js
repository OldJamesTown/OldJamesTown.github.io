////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(x, y, step) {
  const newArr = [];
  if (x === y) {
    return newArr;
 } else if (!step) {
    for (x; x <= y; x++) {
      newArr.push(x);
    }
 } else if (step > 0) {
    for (x; x <= y; x += step) {
      newArr.push(x);
    }
 } return newArr;
}
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
  return arr.reduce((sum, num) => {
    sum += num;
    return sum;
  }, 0)

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  if (!array.length) {
    return [];
  }
  else return reverseArray(array.slice(1)).concat(array[0]);
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for (let i = 0; i < Math.floor(array.length/2); i++) {
    const first = array[i];
    const last = array[array.length-i-1];
    array[i] = last;
    array[array.length-i-1] = first;
  }

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list = null;
  for (let i = array.length-1; i >= 0; i--) {
     list = {value: array[i], rest: list};
  } 
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let array = []; 
  for (let node = list; node; node = node.rest) {
    array.push(node.value);
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  let listArr = listToArray(list)
  listArr.unshift(element);
  return arrayToList(listArr);

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  const listArr = listToArray(list);
  return listArr[num];
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
    if (x === y) {
      return true;
    }
    else if((typeof x == 'object' && x != null) && (typeof y == 'object' && y != null)) {
      if (Object.keys(x).length != Object.keys(y).length) 
        return false;
        
        for (let prop in x) {
          if (y.hasOwnProperty(prop)) {
            if (! deepEqual(x[prop], y[prop]))
              return false;
          }
        } return true;
    } else 
        return false;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
